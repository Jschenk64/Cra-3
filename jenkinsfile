pipeline {
    agent any

    parameters {
        string(name: 'action', defaultValue: 'apply', description: 'Terraform action to execute (apply or destroy)')
    }

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id')   
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key') 
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    extensions: [], 
                    userRemoteConfigs: [[url: 'https://github.com/Jschenk64/Cra-3.git']]
                ])
            }
        }

        stage('Check for Changes in cra-3.tfvars') {
            steps {
                script {
                    def changes = sh(script: "git diff --name-only HEAD~1 HEAD | grep cra-3.tfvars || true", returnStdout: true).trim()
                    if (changes) {
                        echo "Changes detected in cra-3.tfvars. Proceeding with Terraform apply."
                    } else {
                        echo "No changes in cra-3.tfvars. Skipping Terraform apply."
                        currentBuild.result = 'SUCCESS' // Ensure the pipeline doesn't fail.
                        return
                    }
                }
            }
        }

        stage('Terraform Init') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Terraform Action') {
            steps {
                echo "Terraform action is --> ${params.action}"
                sh "terraform ${params.action} --auto-approve"
            }
        }
    }
}
